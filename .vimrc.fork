set guifont=Source\ Code\ Pro\ for\ Powerline:h12,Menlo\ Regular:h14,Consolas\ Regular:h12,Courier\ New\ Regular:h14
"set guifont=Droid\ Sans\ Mono\ for\ Powerline:h14,Menlo\ Regular:h14,Consolas\ Regular:h12,Courier\ New\ Regular:h14

set nocursorline
set nolist
set ttyscroll=0
set guioptions-=L
set guioptions-=r
map <F1> <nop>
nmap <F1> <nop>
imap <F1> <nop>
nmap <leader>rc :source $MYVIMRC <cr>

"set completeopt-=preview

let g:syntastic_python_checkers=['flake8']
let g:indent_guides_enable_on_vim_startup = 0
let g:syntastic_always_populate_loc_list=1
"let g:ycm_server_use_vim_stdout = 1
"let g:ycm_server_log_level = 'debug'

let g:tagbar_sort = 0

let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }

autocmd BufNewFile,BufRead *.gradle set filetype=groovy
autocmd BufNewFile,BufRead *.nxc set filetype=nxc
autocmd FileType nxc setlocal syntax=nxc
"let g:syntastic_disabled_filetypes=[ 'c','cpp','m', 'mm' ]

" Keep search matches in the middle of the window.
" zz centers the screen on the cursor, zv unfolds any fold if the cursor
" suddenly appears inside a fold.
nnoremap * *zzzv
nnoremap # #zzzv
nnoremap n nzzzv
nnoremap N Nzzzv

" Also center the screen when jumping through the changelist
nnoremap g; g;zz
nnoremap g, g,zz

nnoremap <leader>ad :Ant debug<cr>
nnoremap <leader>ai :Ant installd<cr>
nnoremap <leader>ac :Ant clean<cr>

let g:syntastic_mode_map = { 'mode': 'active',
            \ 'active_filetypes': [],
            \ 'passive_filetypes': ['c', 'cpp', 'm', 'mm'] }

let b:javagetset_getterTemplate =
            \ "\n" .
            \ "/**\n" .
            \ " * Get %varname%.\n" .
            \ " * @return %varname% as %type%.\n" .
            \ " */\n" .
            \ "%modifiers% %type% %funcname%() {\n" .
            \ "\treturn %varname%;\n" .
            \ "}"

let b:javagetset_setterTemplate =
            \ "\n" .
            \ "/**\n" .
            \ " * Set %varname%.\n" .
            \ " * @param %varname% the value to set %varname%.\n" .
            \ " */\n" .
            \ "%modifiers% void %funcname%(%type% %varname%) {\n" .
            \ "\tthis.%varname% = %varname%;\n" .
            \ "}"

" Define a command to make it easier to use
command! -nargs=+ QFDo call QFDo(<q-args>)

" Function that does the work
function! QFDo(command)
    " Create a dictionary so that we can
    " get the list of buffers rather than the
    " list of lines in buffers (easy way
    " to get unique entries)
    let buffer_numbers = {}
    " For each entry, use the buffer number as 
    " a dictionary key (won't get repeats)
    for fixlist_entry in getqflist()
        let buffer_numbers[fixlist_entry['bufnr']] = 1
    endfor
    " Make it into a list as it seems cleaner
    let buffer_number_list = keys(buffer_numbers)

    " For each buffer
    for num in buffer_number_list
        " Select the buffer
        exe 'buffer' num
        " Run the command that's passed as an argument
        exe a:command
        " Save if necessary
        update
    endfor
endfunction
